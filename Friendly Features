======================================================================================================
Дружественные Функции с применениеи ссылок для двух классов и вывод инфы из них
======================================================================================================

class Car;                                                     //Скелет класса, чтобы функция не ломалась натыкаясь на класс который программа еще не прочитала
class Person {
private:
    int age;
    string name;
public:
    Person(string name) {                                      //Конструктор для передачи имени в приват при создании объедков
        this->name = name;
    }
    friend void info_car(Car& car,Person& person);             //Объявдение того, что функция дружественная для этого класса

};

class Car {
private:
    string name;
public:
    Car(string name) {                                         //Конструктор для передачи имени в приват при создании объедков (Обоюдно)
        this->name = name;
    }

    friend void info_car(Car& car, Person& person);               //Объявдение того, что функция дружественная для этого класса (Обоюдно)

};

    void info_car(Car& car, Person& person) {                                                      //Функция выдающая нам текст с инфой из обоих классов, берущая из них инфу не находясь в них, так как она теперь дружественная
    cout << "Chelovek s imenem: " << person.name << " imeet machinu: " << car.name << endl;

}


int main()
{
    Car bmw("BMW");                                //Тут уже на изичах можно создавать объедки сразу с передачей инфы
    Person laura("Laura");
    info_car(bmw,laura);                           //просим функцию сработать и указываем что мы от нее хотим видеть


    return 0;
}
